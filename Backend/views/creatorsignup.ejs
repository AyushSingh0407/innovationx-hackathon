<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.2.9/dist/web3.min.js"></script>
    <title>Sign Up as Creator</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="creatorsignup.css" >
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <script>
        function deploy(){
            document.addEventListener('DOMContentLoaded', async function () {
                const Web3 = window.Web3;
                let web3;
                const initWeb3 = async () => {
                    if (window.ethereum) {
                        web3 = new Web3(window.ethereum);
                        await window.ethereum.enable();
                    } else if (window.web3) {
                        web3 = new Web3(window.web3.currentProvider);
                    } else {
                        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
                        return null;
                    }
                    return web3;
                };
const createWalletBtn = document.getElementById('createWalletBtn');
                createWalletBtn.addEventListener('click', async function (event) {
    event.preventDefault();
    await initWeb3();

    if (!web3) {
        console.error('Web3 is not initialized.');
        return;
    }
    const accounts = await web3.eth.getAccounts();

    if (accounts.length === 0) {
        console.error('MetaMask is not connected.');
        return;
    }
    const name = document.getElementById('creatorname').value;
    const signupId = web3.utils.keccak256(web3.utils.randomHex(32));
    const email = document.getElementById('creatoremail').value;
    const addr = document.getElementById('creatormetamaskid').value;
    const channel_id = document.getElementById('creatorchannelid').value;
    const channel_name = document.getElementById('creatorchannelname').value;
    const abi = [{"inputs":[{"internalType":"bytes32","name":"signupId","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"addr","type":"string"},{"internalType":"string","name":"channel_id","type":"string"},{"internalType":"string","name":"channel_name","type":"string"}],"name":"addUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signup","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"email","type":"string"},{"internalType":"string","name":"addr","type":"string"},{"internalType":"string","name":"channel_id","type":"string"},{"internalType":"string","name":"channel_name","type":"string"}],"stateMutability":"view","type":"function"}];
    const contractAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';
    const contract = new web3.eth.Contract(abi, contractAddress);
    const totalAmount = '0.01';
    const amountInWei = web3.utils.toWei(totalAmount, 'ether');
        
        const transactionObject1 = {
            from: accounts[0],
            to: contractAddress,
            data: contract.methods.addUser(signupId, name, email, addr,channel_id,channel_name).encodeABI(),
            gas: '2000000', 
            chainId: 80001
        };
        
    const transactionObject2 = {
        from: accounts[0],
        to:'0x924a5D7C29834953C8A791D94FF233239B033E2E',
        value: amountInWei.toString(),
        gas: '21000',
        gasPrice: '5000000000',
        chainId: 80001
    };
    

    try {
        const batch = new web3.BatchRequest();
        
        batch.add(web3.eth.sendTransaction.request(transactionObject1, (err, txHash) => {
            if (err) {
                console.error('Error deploying contract:', err);
                alert(`Error deploying contract: ${err.message}`);
            } else {
                console.log('Transaction hash for contract deployment:', txHash);
            }
        }));
        
        batch.add(web3.eth.sendTransaction.request(transactionObject2, (err, txHash) => {
            if (err) {
                console.error('Error sending MATIC:', err);
                alert(`Error sending MATIC: ${err.message}`);
            } else {
                console.log('Transaction hash for sending MATIC:', txHash);
            }
        }));
        
        batch.execute();

    } catch (error) {
        console.error('Error signing up creator:', error);
    }
});
            });
        }
function display(){
    var x=document.getElementById("usersubmit")
    x.style.display="block";
    var y=document.getElementById("createWalletBtn")
    y.style.display="none";
}
        
function checkcreatorform() {
    var name = document.getElementById("creatorname");
    if (name.value === "") {
        alert("Please enter your name!");
        return false;
    }

    var Email = document.getElementById("creatoremail");
    var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z]{2,4})+$/;
    if (!filter.test(Email.value)) {
        alert('Please input a valid e-mail address!');
        return false;
    }

    var channelID = document.getElementById("creatorchannelid");
    if (channelID.value === "" && document.getElementById("creatorplatform").value !== "instagram") {
        alert("Please enter ID of your Youtube Channel!");
        return false;
    }

    var channelName = document.getElementById("creatorchannelname");
    if (channelName.value === "" && document.getElementById("creatorplatform").value !== "instagram") {
        alert("Please enter your Channel's name!");
        return false;
    }

    var mid = document.getElementById("creatormetamaskid");
    if (mid.value === "") {
        alert("Please enter your metamask id!");
        return false;
    }


    return true;
}       
        deploy();
    </script>
</head>
<body id="body">
    <div id="bord">
        <nav class="navbar">
            <div class="navdiv">

                <ul>
                    <li><a href="/usersignup"><span class="join">User</span></a></li>
                    <li><span id="mint">metamint</span></li>
                    <li><a href="/"><span class="join">Home</span></a></li>
                </ul>
            </div>
        </nav>
    </div>
      <p id="signuhead">Signup</p>
      <form id="userform" method="post" action="/creatorsignup">
        <label for="creatorname">Name</label>
        <input class="inputplace" id="creatorname" type="text" name="creatorname" >
        <br>
        <label for="creatoremail">Email</label>
        <input class="inputplace" id="creatoremail" type="email" name="creatoremail" >
        <br>
        <label for="creatorchannelid">Channel ID</label>
        <input class="inputplace" id="creatorchannelid" type="text" name="creatorchannelid" >
        <br>
        <label for="creatorchannelname">Channel Name</label>
        <input class="inputplace" id="creatorchannelname" type="text" name="creatorchannelname">
        <br>
        <label for="creatormetamaskid">Wallet ID</label>
        <input class="inputplace" id="creatormetamaskid" type="text" name="creatormetamaskid" >
        <br>
        <label for="creatorpassword">Password</label>
        <input class="inputplace" id="creatorpassword" type="password" name="creatorpassword" required >
        <br>
        <input id="usersubmit" type="submit" value="Sign Up" style="display: none;">
    </form>
    <button id="createWalletBtn" onclick="display()">Connect Wallet</button>
</body>
</html>


